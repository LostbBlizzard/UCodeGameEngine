name: Deployment

on: 
  workflow_dispatch:
   inputs:
      VersionNumber:
        description: 'The New Version Number Ex: "1.2.3"'
        required: true
        type: string
        default: "0.0.0"

      IsPreRelease:
        description: 'Is Prelease'
        required: true
        type: boolean
        default: true

jobs:
  build-Windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Run Premake install
        run: ./premake.bat install
      
      - name: update version
        run: |
         echo ${{ inputs.VersionNumber }} > ./version.txt
         ./premake.bat updateversion

      - name: Run Premake
        run: ./VS_2019.bat

      - name: Build 64 bit
        run: ./premake.bat buildeditorpublished

      - name: Build 32 bit
        if: ${{ inputs.IsPreRelease == false}}
        run: ./premake.bat buildeditor32published

      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
          name: Output_Windows
          path: |
           Output/
           !Output/int
          retention-days: 1
  
  build-Linux:
    runs-on: ubuntu-latest
    
    steps:
     - uses: actions/checkout@v3
       with:
         submodules: 'true'

     - name: Make a scripts executable
       run: |
        chmod +x ./GNU_Make.sh
        chmod +x ./premake.sh
         
     - name: Run Premake install
       run: ./premake.sh install

     - name: update version
       run: |
         echo ${{ inputs.VersionNumber }} > ./version.txt
         ./premake.sh updateversion
     
     - name: Run Premake
       run: ./GNU_Make.sh

     - name: Build 64 bit
       run: ./premake.sh buildeditorpublished

     - name: Archive Output
       uses: actions/upload-artifact@v3
       with:
         name: Output_Linux
         path: |
          Output/
          !Output/int
         retention-days: 1

  build-MacOS:
    runs-on: macos-latest
    if: 'false' # I Dont have a Mac to test out builds

    steps:
     - uses: actions/checkout@v3
       with:
         submodules: 'true'

     - name: Make a scripts executable
       run: |
        chmod +x ./GNU_Make.sh
        chmod +x ./premake.sh
         
     - name: Run Premake install
       run: ./premake.sh install

     - name: update version
       run: |
         echo ${{ inputs.VersionNumber }} > ./version.txt
         ./premake.bat updateversion
     
     - name: Run Premake
       run: ./GNU_Make.sh

     - name: Build 64 bit
       run: ./premake.sh buildeditorpublished

     - name: Archive Output
       uses: actions/upload-artifact@v3
       with:
         name: Output_MacOS
         path: Output/
         retention-days: 1  
  
  build-Web:  
    runs-on: ubuntu-latest
    if: 'false'

    steps:
      - name: Build Web
        run: echo "Build"

  BuildWindowsInstaller:
    needs: [build-Windows,build-Linux]
    runs-on: windows-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: MoveOutputs
        run: |
            mkdir -p Output/UCodeEditor/Win64/Published
            mkdir -p Output/UCodeEditor/linux64/Published
            mkdir -p UCodeEditor/UFiles/bin
            cp Output_Windows/UCodeEditor/Win64/Published/UCodeEditor.exe Output/UCodeEditor/Win64/Published/UCodeEditor.exe
            cp Output_Windows/UCodeApp/Win64/Published/UCodeApp.exe UCodeEditor/UFiles/bin/UCAppWinDebug86X64.exe
            cp Output_Windows/UCodeApp/Win64/Published/UCodeAppPub.exe UCodeEditor/UFiles/bin/UCAppWinPub86X64.exe
            cp Output_Linux/UCodeEditor/linux64/Published/UCodeEditor Output/UCodeEditor/linux64/Published/UCodeEditor
            cp Output_Linux/UCodeApp/linux64/Published/UCodeApp UCodeEditor/UFiles/bin/UCAppLinuxDebug86X64
            cp Output_Linux/UCodeApp/linux64/Published/UCodeAppPub UCodeEditor/UFiles/bin/UCAppLinuxPub86X64

      - name: Move Outputs 32 bit
        if: ${{ inputs.IsPreRelease == false}}
        run: |
          mkdir -p Output/UCodeEditor/Win32/Published
          cp Output_Windows/UCodeEditor/Win32/Published/UCodeEditor.exe Output/UCodeEditor/Win32/Published/UCodeEditor.exe
          cp Output_Windows/UCodeApp/Win32/Published/UCodeApp.exe UCodeEditor/UFiles/bin/UCAppWinDebug86X32.exe
          cp Output_Windows/UCodeApp/Win32/Published/UCodeAppPub.exe UCodeEditor/UFiles/bin/UCAppWinPub86X32.exe
       
      - name: install inno
        run: ./premake.bat installinno

      - name: update version
        run: |
         echo ${{ inputs.VersionNumber }} > ./version.txt
         ./premake.bat updateversion

      - name: Build API bindings
        run: |
          Output_Windows/UCodeLangCl/Win64/Published/uclang cppdirtoulangvm ./UCode/src ./UCode/src/UCodeRunTime/ULibrarys/UCodeLang/UCodeAPI.cpp ./UCodeAPI/GameEngine/src/API.uc 
          Output_Windows/UCodeLangCl/Win64/Published/uclang cppdirtoulangvm ./UCodeEditor/src/ULang/API ./UCodeEditor/src/ULang/EditorLink.cpp ./UCodeAPI/GameEngineEditor/src/API.uc 

      - name: Pack Editor Ufiles
        run: ./premake.bat package_editor
      
      - name: copy new UFiles.data
        run: cp -Force Output/UFiles.data Output/UCodeEditor/Win64/Published/UFiles.data

      - name: build installer
        run: ./premake.bat buildinstaller
 
      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
         name: Output_Installer
         path: Output/UCodeGameEngineSetup.exe
         retention-days: 1  
  

  deployment-GitHub:
    needs: [BuildWindowsInstaller]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
         submodules: 'true'

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: MoveOutputs
        run: |
            mkdir -p Output/UCodeEditor/Win64/Published
            mkdir -p Output/UCodeEditor/linux64/Published
            mkdir -p UCodeEditor/UFiles/bin
            cp Output_Windows/UCodeEditor/Win64/Published/UCodeEditor.exe Output/UCodeEditor/Win64/Published/UCodeEditor.exe
            cp Output_Windows/UCodeApp/Win64/Published/UCodeApp.exe UCodeEditor/UFiles/bin/UCAppWinDebug86X64.exe
            cp Output_Windows/UCodeApp/Win64/Published/UCodeAppPub.exe UCodeEditor/UFiles/bin/UCAppWinPub86X64.exe
            cp Output_Linux/UCodeEditor/linux64/Published/UCodeEditor Output/UCodeEditor/linux64/Published/UCodeEditor
            cp Output_Linux/UCodeApp/linux64/Published/UCodeApp UCodeEditor/UFiles/bin/UCAppLinuxDebug86X64
            cp Output_Linux/UCodeApp/linux64/Published/UCodeAppPub UCodeEditor/UFiles/bin/UCAppLinuxPub86X64

      - name: Move Outputs 32 bit
        if: ${{ inputs.IsPreRelease == false}}
        run: |
          mkdir -p Output/UCodeEditor/Win32/Published
          cp Output_Windows/UCodeEditor/Win32/Published/UCodeEditor.exe Output/UCodeEditor/Win32/Published/UCodeEditor.exe
          cp Output_Windows/UCodeApp/Win32/Published/UCodeApp.exe UCodeEditor/UFiles/bin/UCAppWinDebug86X32.exe
          cp Output_Windows/UCodeApp/Win32/Published/UCodeAppPub.exe UCodeEditor/UFiles/bin/UCAppWinPub86X32.exe
            
      - name: Run Premake install # because some libs are shared
        run: ./premake.sh install
      
      - name: Build API bindings
        run: |
          chmod +x Output_Linux/UCodeLangCl/linux64/Published/uclang 
          Output_Linux/UCodeLangCl/linux64/Published/uclang cppdirtoulangvm ./UCode/src ./UCode/src/UCodeRunTime/ULibrarys/UCodeLang/UCodeAPI.cpp ./UCodeAPI/GameEngine/src/API.uc 
          Output_Linux/UCodeLangCl/linux64/Published/uclang cppdirtoulangvm ./UCodeEditor/src/ULang/API ./UCodeEditor/src/ULang/EditorLink.cpp ./UCodeAPI/GameEngineEditor/src/API.uc 
      
      - name: update version
        run: |
          echo ${{ inputs.VersionNumber }} > ./version.txt
          ./premake.sh updateversion

      - name: Pack Editor Ufiles
        run: | 
         chmod +x ./Output/UCodeEditor/linux64/Published/UCodeEditor
         ./premake.sh package_editor

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          release_name: Release ${{ inputs.VersionNumber }}
          body_path: ./changelog.md
          draft: false
          prerelease: ${{ inputs.IsPreRelease }}
          tag_name: Release-${{ inputs.VersionNumber }}
      
      - name: Upload UFiles Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: Output/UFiles.data
          asset_name: UFiles.data
          asset_content_type: application/octet-stream

      - name: Upload Win64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: Output/UCodeEditor/Win64/Published/UCodeEditor.exe
          asset_name: UCodeEditor.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: Output/UCodeEditor/linux64/Published/UCodeEditor
          asset_name: LinuxUCodeEditor
          asset_content_type: application/octet-stream
      
      - name: Upload Install.sh Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./install.sh
          asset_name: install.sh
          asset_content_type: application/octet-stream

      - name: Upload Installer Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: Output_Installer/UCodeGameEngineSetup.exe
          asset_name: UCodeGameEngineSetup.exe
          asset_content_type: application/octet-stream
  
     
      - name: Upload version Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: version.txt
          asset_name: version.txt
          asset_content_type: application/octet-stream
 
      - name: Upload changelog Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: changelog.md
          asset_name: changelog.md
          asset_content_type: application/octet-stream

      - name: Upload Windows Version to Itch
      - uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: windows
          ITCH_GAME: ucodegameengine 
          ITCH_USER: Lost blizzard          
          PACKAGE: UCodeGameEngineSetup.exe    
          VERSION: ${{ inputs.VersionNumber }}
          
      - name: Upload Linux Version to Itch
      - uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: linux
          ITCH_GAME: ucodegameengine          
          ITCH_USER: Lost blizzard           
          PACKAGE: install.sh
          VERSION: ${{ inputs.VersionNumber }}
